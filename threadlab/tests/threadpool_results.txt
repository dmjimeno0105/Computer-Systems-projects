Starting test: Basic functionality testing (1)
================================================================================
Running: timeout 15 ./threadpool_test -n 1 [+]
Running: timeout 15 ./threadpool_test -n 2 [+]
Running: timeout 15 ./threadpool_test -n 4 [+]

Starting test: Basic functionality testing (2)
================================================================================
Running: timeout 15 ./threadpool_test2 -n 1 [+]
Running: timeout 15 ./threadpool_test2 -n 2 [+]
Running: timeout 15 ./threadpool_test2 -n 4 [+]

Starting test: Basic functionality testing (3)
================================================================================
Running: timeout 15 ./threadpool_test3 -n 1 [+]
Running: timeout 15 ./threadpool_test3 -n 2 [+]
Running: timeout 15 ./threadpool_test3 -n 4 [+]

Starting test: Basic functionality testing (4)
================================================================================
Running: timeout 15 ./threadpool_test4 -n 2 [+]
Running: timeout 15 ./threadpool_test4 -n 4 [+]

Starting test: Basic functionality testing (5)
================================================================================
Running: timeout 15 ./threadpool_test5 -n 2 [+]
Running: timeout 15 ./threadpool_test5 -n 4 [+]

Starting test: Basic functionality testing (6)
================================================================================
Running: timeout 15 ./threadpool_test6.py -n 1 [+]

Starting test: parallel mergesort
================================================================================
Running: timeout 15 ./mergesort -n 1 -s 44 3000000 [+]
Running: timeout 15 ./mergesort -n 2 -s 44 3000000 [+]
Running: timeout 15 ./mergesort -n 4 -s 44 3000000 [+]
Running: timeout 15 ./mergesort -n 8 -s 44 3000000 [+]
Running: timeout 15 ./mergesort -n 16 -s 44 3000000 [+]
Running: timeout 15 ./mergesort -n 1 -s 44 30000000 [+]
Running: timeout 15 ./mergesort -n 2 -s 44 30000000 [+]
Running: timeout 15 ./mergesort -n 4 -s 44 30000000 [+]
Running: timeout 15 ./mergesort -n 8 -s 44 30000000 [+]
Running: timeout 15 ./mergesort -n 16 -s 44 30000000 [+]
Running: timeout 60 ./mergesort -n 8 -s 44 300000000 [+]
Running: timeout 60 ./mergesort -n 16 -s 44 300000000 [+]
Running: timeout 60 ./mergesort -n 32 -s 44 300000000 [+]

Starting test: parallel quicksort
================================================================================
Running: timeout 15 ./quicksort -n 1 -s 44 -d 12 3000000 [+]
Running: timeout 15 ./quicksort -n 2 -s 44 -d 12 3000000 [+]
Running: timeout 15 ./quicksort -n 4 -s 44 -d 12 3000000 [+]
Running: timeout 15 ./quicksort -n 8 -s 44 -d 12 3000000 [+]
Running: timeout 15 ./quicksort -n 16 -s 44 -d 12 3000000 [+]
Running: timeout 15 ./quicksort -n 1 -s 44 -d 15 30000000 [+]
Running: timeout 15 ./quicksort -n 2 -s 44 -d 15 30000000 [+]
Running: timeout 15 ./quicksort -n 4 -s 44 -d 15 30000000 [+]
Running: timeout 15 ./quicksort -n 8 -s 44 -d 15 30000000 [+]
Running: timeout 15 ./quicksort -n 16 -s 44 -d 15 30000000 [+]
Running: timeout 60 ./quicksort -n 8 -s 44 -d 18 300000000 [+]
Running: timeout 60 ./quicksort -n 16 -s 44 -d 18 300000000 [+]
Running: timeout 60 ./quicksort -n 32 -s 44 -d 18 300000000 [+]

Starting test: parallel sum using divide-and-conquer
================================================================================
Running: timeout 15 ./psum_test -n 1 10000000 [+]
Running: timeout 15 ./psum_test -n 2 10000000 [+]
Running: timeout 15 ./psum_test -n 4 10000000 [+]
Running: timeout 15 ./psum_test -n 8 10000000 [+]
Running: timeout 15 ./psum_test -n 16 10000000 [+]
Running: timeout 15 ./psum_test -n 1 100000000 [+]
Running: timeout 15 ./psum_test -n 2 100000000 [+]
Running: timeout 15 ./psum_test -n 4 100000000 [+]
Running: timeout 15 ./psum_test -n 8 100000000 [+]
Running: timeout 15 ./psum_test -n 16 100000000 [+]
Running: timeout 60 ./psum_test -n 8 1000000000 [+]
Running: timeout 60 ./psum_test -n 16 1000000000 [+]
Running: timeout 60 ./psum_test -n 32 1000000000 [+]

Starting test: parallel n-queens solver
================================================================================
Running: timeout 15 ./nqueens -n 1 11 [+]
Running: timeout 15 ./nqueens -n 2 11 [+]
Running: timeout 15 ./nqueens -n 4 11 [+]
Running: timeout 15 ./nqueens -n 8 11 [+]
Running: timeout 15 ./nqueens -n 16 11 [+]
Running: timeout 60 ./nqueens -n 1 12 [+]
Running: timeout 60 ./nqueens -n 2 12 [+]
Running: timeout 60 ./nqueens -n 4 12 [+]
Running: timeout 60 ./nqueens -n 8 12 [+]
Running: timeout 60 ./nqueens -n 16 12 [+]
Running: timeout 60 ./nqueens -n 8 13 [+]
Running: timeout 60 ./nqueens -n 16 13 [+]
Running: timeout 60 ./nqueens -n 32 13 [+]
Running: timeout 60 ./nqueens -n 16 14 [+]
Running: timeout 60 ./nqueens -n 32 14 [+]

Starting test: parallel fibonacci toy test
================================================================================
Running: timeout 60 ./fib_test -n 1 32 [+]
Running: timeout 60 ./fib_test -n 2 32 [+]
Running: timeout 60 ./fib_test -n 4 32 [+]
Running: timeout 60 ./fib_test -n 8 32 [+]
Running: timeout 60 ./fib_test -n 16 32 [+]
Running: timeout 60 ./fib_test -n 16 41 [ ]
Running: timeout 60 ./fib_test -n 32 41 [ ]

Test name:                1         2         4         8         16        32        
================================================================================
BASIC1:  Basic functionality testing (1)
  basic test 1           [X]       [X]       [X]                                     
BASIC2:  Basic functionality testing (2)
  basic test 2           [X]       [X]       [X]                                     
BASIC3:  Basic functionality testing (3)
  basic test 3           [X]       [X]       [X]                                     
BASIC4:  Basic functionality testing (4)
  basic test 4                     [X]       [X]                                     
BASIC5:  Basic functionality testing (5)
  basic test 5                     [X]       [X]                                     
BASIC6:  Basic functionality testing (6)
  basic test 6           [X]                                                         
MERGESORT:  parallel mergesort
  mergesort small        [X]       [X]       [X]       [X]       [X]                 
  mergesort medium       [X]       [X]       [X]       [X]       [X]                 
  mergesort large                                      [12.639s] [8.345s]  [7.670s]  
QUICKSORT:  parallel quicksort
  quicksort small        [X]       [X]       [X]       [X]       [X]                 
  quicksort medium       [X]       [X]       [X]       [X]       [X]                 
  quicksort large                                      [11.111s] [6.466s]  [5.113s]  
PSUM:  parallel sum using divide-and-conquer
  psum_test small        [X]       [X]       [X]       [X]       [X]                 
  psum_test medium       [X]       [X]       [X]       [X]       [X]                 
  psum_test large                                      [X]       [X]       [X]       
NQUEENS:  parallel n-queens solver
  nqueens 11             [X]       [X]       [X]       [X]       [X]                 
  nqueens 12             [X]       [X]       [X]       [X]       [X]                 
  nqueens 13                                           [X]       [X]       [X]       
  nqueens 14                                                     [11.428s] [8.011s]  
FIBONACCI:  parallel fibonacci toy test
  fibonacci 32           [X]       [X]       [X]       [X]       [X]                 
  fibonacci 41                                                   [ ]       [ ]       
================================================================================
You have met minimum requirements, your performance score will count.
Wrote full results to fj_testdir_2023-10-24_10:45:04.748350/full-results.json